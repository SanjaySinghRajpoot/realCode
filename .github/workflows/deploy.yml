name: CI/CD with Terraform
'on':
  push:
    branches:
      - main
env:
  AWS_ACCESS_KEY_ID: '${{ secrets.AWS_ACCESS_KEY_ID }}'
  AWS_SECRET_ACCESS_KEY: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
  TF_STATE_BUCKET_NAME: '${{ secrets.AWS_TF_STATE_BUCKET_NAME }}'
  PRIVATE_SSH_KEY: '${{ secrets.AWS_SSH_KEY_PRIVATE }}'
  PUBLIC_SSH_KEY: '${{ secrets.AWS_SSH_KEY_PUBLIC }}'
  AWS_REGION: ap-south-1
  REGISTRY: buddy22
jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    outputs:
      SERVER_PUBLIC_IP: '${{ steps.set-ip.outputs.instance_public_ip }}'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
      - name: Terraform init
        id: init
        run: >-
          terraform init -backend-config="bucket=$TF_STATE_BUCKET_NAME"
          -backend-config="region=ap-south-1"
        working-directory: ./terraform
      - name: Terraform Plan
        id: plan
        run: |-
          terraform plan \
          -var="region=ap-south-1" \
          -var="public_key=$PUBLIC_SSH_KEY" \
          -var="private_key=$PRIVATE_SSH_KEY" \
          -var="key_name=deployer-key" \
          -out=PLAN
        working-directory: ./terraform
      - name: Terraform Apply
        id: apply
        run: terraform apply PLAN
        working-directory: ./terraform
      - name: Set output
        id: set-ip
        run: >-
          echo "::set-output name=instance_public_ip::$(terraform output
          instance_public_ip)"
        working-directory: ./terraform
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Set IP env variable
        run: echo SERVER_PUBLIC_IP=${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }} >> $GITHUB_ENV
      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: '${{ secrets.DOCKER_USERNAME }}'
          password: '${{ secrets.DOCKER_PASSWORD }}'
      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: '${{ env.REGISTRY  }}/realcode-app-backend:latest'
      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          push: true
          tags: '${{ env.REGISTRY }}/realcode-app-frontend:latest'
      - name: Build and push Consumer Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./utils/kafka/consumer
          push: true
          tags: '${{ env.REGISTRY }}/realcode-app-consumer:latest'
      - name: Create Docker Compose file
        run: |
          cat <<EOF > docker-compose.yml
           version: '3.8'
           services:
             redisCache:
               image: redis:alpine
               restart: always
               container_name: redisCache
               ports:
                 - '6379:6379'
               command: redis-server --save 20 1 --loglevel warning --requirepass ${PASSWORD}
               volumes: 
                 - redisCache:/data
             zooRealcode:
               image: confluentinc/cp-zookeeper:7.3.2
               hostname: zooRealcode
               container_name: zooRealcode
               ports:
                 - "2181:2181"
               environment:
                 ZOOKEEPER_CLIENT_PORT: 2181
                 ZOOKEEPER_SERVER_ID: 1
                 ZOOKEEPER_SERVERS: zooRealcode:2888:3888
             kafkaRealCode:
               image: confluentinc/cp-kafka:7.3.2
               hostname: kafkaRealCode
               container_name: kafkaRealCode
               ports:
                 - "9092:9092"
                 - "29092:29092"
                 - "9999:9999"
               environment:
                 KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafkaRealCode:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
                 KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
                 KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
                 KAFKA_ZOOKEEPER_CONNECT: "zooRealcode:2181"
                 KAFKA_BROKER_ID: 1
                 KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
                 KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
                 KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
                 KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
                 KAFKA_JMX_PORT: 9999
                 KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
                 KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
                 KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
               depends_on:
                 - zooRealcode
             frontend:
               container_name: frontend
               image: buddy22/realcode-app-frontend:latest
               pull_policy: always
               # build:
               #   context: ./frontend
               #   dockerfile: Dockerfile
               ports:
                 - "3000:3000"
               environment:
                 - BACKEND_URL=http://backend:8080  
               volumes:
                 - ./:/app
               depends_on:
                 - backend
             backend: 
               container_name: backend
               image: buddy22/realcode-app-backend:latest
               pull_policy: always
               build:
                 context: .
                 dockerfile: Dockerfile
               ports:
                 - "8080:8080"
               volumes:
                 - ./:/app
               depends_on:
                 - redisCache
                 - zooRealcode
                 - kafkaRealCode
             consumer: 
               container_name: consumer
               image: buddy22/realcode-app-consumer:latest
               pull_policy: always
               # build:
               #   context: ./utils/kafka/consumer
               #   dockerfile: Dockerfile
               ports:
                 - "8081:8081"
               volumes:
                 - ./:/app
               depends_on:
                 - redisCache
                 - zooRealcode
                 - kafkaRealCode
           volumes:
             database_dockerizing:
             api_volume:
             redisCache:
               driver: local
             main-app:
               driver: local

           networks:
             fullstack:
               driver: bridge
          EOF
      - name: Transfer Docker Compose file to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_PUBLIC_IP }}
          username: ubuntu
          key: ${{ env.PRIVATE_SSH_KEY }}
          script: >
            scp -o StrictHostKeyChecking=no docker-compose.yml ubuntu@${{
            env.SERVER_PUBLIC_IP }}:~/docker-compose.yml
      - name: SSH into EC2 and run Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: '${{ env.SERVER_PUBLIC_IP }}'
          username: ubuntu
          key: '${{ env.PRIVATE_SSH_KEY }}'
          script: >
            ssh ubuntu@${{ env.SERVER_PUBLIC_IP }} 'docker-compose -f
            ~/docker-compose.yml up -d'
